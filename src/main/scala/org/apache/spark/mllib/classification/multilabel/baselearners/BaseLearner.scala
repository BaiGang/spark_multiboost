/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.mllib.classification.multilabel.baselearners

import org.apache.spark.annotation.Experimental
import org.apache.spark.mllib.classification.multilabel.{ MultiLabelClassificationAlgorithm, MultiLabelClassificationModel }
import org.apache.spark.mllib.util.WeightedMultiLabeledPoint
import org.apache.spark.rdd.RDD

/**
 * The BaseLearnerModel type. Every base learner type should extend this one.
 */
@Experimental
abstract class BaseLearnerModel extends MultiLabelClassificationModel {
}

/**
 * Modeling training algorithm goes here. Every base learner
 * will have an associated algorithm type.
 *
 * @tparam M The type of the model generated by the algorithm.
 */
@Experimental
abstract class BaseLearnerAlgorithm[M <: BaseLearnerModel]
    extends MultiLabelClassificationAlgorithm[M] {

  def run(dataSet: RDD[WeightedMultiLabeledPoint]): M
}

